Search.setIndex({"alltitles": {"Attributes": [[2, "attributes"], [2, "id28"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "Module contents": [[2, "module-treeModels"], [3, "module-treeModels.models"]], "Notes": [[2, "notes"]], "Parameters": [[2, "parameters"], [2, "id1"], [2, "id3"], [2, "id5"], [2, "id15"], [2, "id18"], [2, "id20"], [2, "id22"], [2, "id24"], [2, "id26"], [2, "id29"], [2, "id31"], [2, "id33"], [2, "id35"], [2, "id37"], [2, "id39"], [2, "id41"], [2, "id43"], [2, "id45"], [2, "id47"], [2, "id49"], [2, "id51"], [3, "parameters"], [3, "id3"], [3, "id6"], [3, "id9"], [3, "id11"], [3, "id13"], [3, "id17"], [3, "id20"], [3, "id23"], [3, "id26"], [3, "id28"]], "Raises": [[3, "raises"], [3, "id5"], [3, "id8"], [3, "id22"], [3, "id25"]], "Returns": [[2, "returns"], [2, "id2"], [2, "id4"], [2, "id6"], [2, "id7"], [2, "id8"], [2, "id9"], [2, "id10"], [2, "id11"], [2, "id12"], [2, "id13"], [2, "id14"], [2, "id16"], [2, "id17"], [2, "id19"], [2, "id21"], [2, "id23"], [2, "id25"], [2, "id27"], [2, "id30"], [2, "id32"], [2, "id34"], [2, "id36"], [2, "id38"], [2, "id40"], [2, "id42"], [2, "id44"], [2, "id46"], [2, "id48"], [2, "id50"], [2, "id52"], [3, "returns"], [3, "id1"], [3, "id2"], [3, "id4"], [3, "id7"], [3, "id10"], [3, "id12"], [3, "id16"], [3, "id18"], [3, "id19"], [3, "id21"], [3, "id24"], [3, "id27"], [3, "id31"]], "Submodules": [[2, "submodules"], [3, "submodules"]], "Subpackages": [[2, "subpackages"]], "Welcome to Tree Models\u2019s documentation!": [[0, "welcome-to-tree-models-s-documentation"]], "src": [[1, "src"]], "treeModels package": [[2, "treemodels-package"]], "treeModels.base_tree module": [[2, "module-treeModels.base_tree"]], "treeModels.decision_algorithms module": [[2, "module-treeModels.decision_algorithms"]], "treeModels.models package": [[3, "treemodels-models-package"]], "treeModels.models.model module": [[3, "module-treeModels.models.model"]], "treeModels.models.tree_models module": [[3, "module-treeModels.models.tree_models"]]}, "docnames": ["index", "modules", "treeModels", "treeModels.models"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2}, "filenames": ["index.rst", "modules.rst", "treeModels.rst", "treeModels.models.rst"], "indexentries": {"algorithm (treemodels.models.tree_models.decisiontreeclassifier attribute)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.algorithm", false]], "algorithm (treemodels.models.tree_models.randomforestclassifier attribute)": [[3, "treeModels.models.tree_models.RandomForestClassifier.algorithm", false]], "basedecision (class in treemodels.base_tree)": [[2, "treeModels.base_tree.BaseDecision", false]], "bootstrap (treemodels.models.tree_models.randomforestclassifier attribute)": [[3, "treeModels.models.tree_models.RandomForestClassifier.bootstrap", false]], "c45 (treemodels.decision_algorithms.decisionalgorithm attribute)": [[2, "treeModels.decision_algorithms.DecisionAlgorithm.C45", false]], "c45() (in module treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.c45", false]], "categoric (treemodels.decision_algorithms.columntypes attribute)": [[2, "treeModels.decision_algorithms.ColumnTypes.CATEGORIC", false]], "categoricdecision (class in treemodels.base_tree)": [[2, "treeModels.base_tree.CategoricDecision", false]], "columntypes (class in treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.ColumnTypes", false]], "copy() (treemodels.base_tree.basedecision method)": [[2, "treeModels.base_tree.BaseDecision.copy", false]], "copy() (treemodels.base_tree.categoricdecision method)": [[2, "treeModels.base_tree.CategoricDecision.copy", false]], "copy() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.copy", false]], "copy() (treemodels.base_tree.numericdecision method)": [[2, "treeModels.base_tree.NumericDecision.copy", false]], "create_categoric_matrix() (in module treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.create_categoric_matrix", false]], "decisionalgorithm (class in treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.DecisionAlgorithm", false]], "decisiontree (class in treemodels.base_tree)": [[2, "treeModels.base_tree.DecisionTree", false]], "decisiontreeclassifier (class in treemodels.models.tree_models)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier", false]], "entropy() (in module treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.entropy", false]], "fit() (treemodels.models.model.model method)": [[3, "treeModels.models.model.Model.fit", false]], "fit() (treemodels.models.tree_models.decisiontreeclassifier method)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.fit", false]], "fit() (treemodels.models.tree_models.randomforestclassifier method)": [[3, "treeModels.models.tree_models.RandomForestClassifier.fit", false]], "gain_ratio() (in module treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.gain_ratio", false]], "get_class() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.get_class", false]], "get_class_proportion() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.get_class_proportion", false]], "get_classes() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.get_classes", false]], "get_classes() (treemodels.models.tree_models.decisiontreeclassifier method)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.get_classes", false]], "get_col_types() (in module treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.get_col_types", false]], "get_depth() (treemodels.models.tree_models.decisiontreeclassifier method)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.get_depth", false]], "get_impurity() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.get_impurity", false]], "get_label() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.get_label", false]], "get_labels() (treemodels.models.tree_models.decisiontreeclassifier method)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.get_labels", false]], "get_n_leaves() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.get_n_leaves", false]], "get_n_leaves() (treemodels.models.tree_models.decisiontreeclassifier method)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.get_n_leaves", false]], "get_params() (treemodels.models.tree_models.decisiontreeclassifier method)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.get_params", false]], "get_params() (treemodels.models.tree_models.randomforestclassifier method)": [[3, "treeModels.models.tree_models.RandomForestClassifier.get_params", false]], "get_umbral() (in module treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.get_umbral", false]], "get_umbral_candidates() (in module treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.get_umbral_candidates", false]], "height() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.height", false]], "id3 (treemodels.decision_algorithms.decisionalgorithm attribute)": [[2, "treeModels.decision_algorithms.DecisionAlgorithm.ID3", false]], "id3() (in module treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.id3", false]], "information_gain() (in module treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.information_gain", false]], "insert_tree() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.insert_tree", false]], "is_leaf() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.is_leaf", false]], "main() (in module treemodels.models.tree_models)": [[3, "treeModels.models.tree_models.main", false]], "make_choice() (treemodels.base_tree.basedecision method)": [[2, "treeModels.base_tree.BaseDecision.make_choice", false]], "make_choice() (treemodels.base_tree.categoricdecision method)": [[2, "treeModels.base_tree.CategoricDecision.make_choice", false]], "make_choice() (treemodels.base_tree.numericdecision method)": [[2, "treeModels.base_tree.NumericDecision.make_choice", false]], "max_depth (treemodels.models.tree_models.decisiontreeclassifier attribute)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.max_depth", false]], "max_depth (treemodels.models.tree_models.randomforestclassifier attribute)": [[3, "treeModels.models.tree_models.RandomForestClassifier.max_depth", false]], "max_features (treemodels.models.tree_models.randomforestclassifier attribute)": [[3, "treeModels.models.tree_models.RandomForestClassifier.max_features", false]], "max_gain_ratio() (in module treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.max_gain_ratio", false]], "max_information_gain() (in module treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.max_information_gain", false]], "max_samples (treemodels.models.tree_models.randomforestclassifier attribute)": [[3, "treeModels.models.tree_models.RandomForestClassifier.max_samples", false]], "min_impurity_decrease (treemodels.models.tree_models.decisiontreeclassifier attribute)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.min_impurity_decrease", false]], "min_impurity_decrease (treemodels.models.tree_models.randomforestclassifier attribute)": [[3, "treeModels.models.tree_models.RandomForestClassifier.min_impurity_decrease", false]], "min_samples_leaf (treemodels.models.tree_models.decisiontreeclassifier attribute)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.min_samples_leaf", false]], "min_samples_leaf (treemodels.models.tree_models.randomforestclassifier attribute)": [[3, "treeModels.models.tree_models.RandomForestClassifier.min_samples_leaf", false]], "min_samples_split (treemodels.models.tree_models.decisiontreeclassifier attribute)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.min_samples_split", false]], "min_samples_split (treemodels.models.tree_models.randomforestclassifier attribute)": [[3, "treeModels.models.tree_models.RandomForestClassifier.min_samples_split", false]], "model (class in treemodels.models.model)": [[3, "treeModels.models.model.Model", false]], "module": [[2, "module-treeModels", false], [2, "module-treeModels.base_tree", false], [2, "module-treeModels.decision_algorithms", false], [3, "module-treeModels.models", false], [3, "module-treeModels.models.model", false], [3, "module-treeModels.models.tree_models", false]], "n_estimators (treemodels.models.tree_models.randomforestclassifier attribute)": [[3, "treeModels.models.tree_models.RandomForestClassifier.n_estimators", false]], "n_samples() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.n_samples", false]], "numeric (treemodels.decision_algorithms.columntypes attribute)": [[2, "treeModels.decision_algorithms.ColumnTypes.NUMERIC", false]], "numericdecision (class in treemodels.base_tree)": [[2, "treeModels.base_tree.NumericDecision", false]], "predict() (treemodels.models.model.model method)": [[3, "treeModels.models.model.Model.predict", false]], "predict() (treemodels.models.tree_models.decisiontreeclassifier method)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.predict", false]], "predict() (treemodels.models.tree_models.randomforestclassifier method)": [[3, "treeModels.models.tree_models.RandomForestClassifier.predict", false]], "predict_proba() (treemodels.models.model.model method)": [[3, "treeModels.models.model.Model.predict_proba", false]], "predict_proba() (treemodels.models.tree_models.decisiontreeclassifier method)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (treemodels.models.tree_models.randomforestclassifier method)": [[3, "treeModels.models.tree_models.RandomForestClassifier.predict_proba", false]], "prune() (treemodels.models.tree_models.decisiontreeclassifier method)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.prune", false]], "random_state (treemodels.models.tree_models.randomforestclassifier attribute)": [[3, "treeModels.models.tree_models.RandomForestClassifier.random_state", false]], "randomforestclassifier (class in treemodels.models.tree_models)": [[3, "treeModels.models.tree_models.RandomForestClassifier", false]], "score() (treemodels.models.model.model method)": [[3, "treeModels.models.model.Model.score", false]], "score() (treemodels.models.tree_models.decisiontreeclassifier method)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.score", false]], "score() (treemodels.models.tree_models.randomforestclassifier method)": [[3, "treeModels.models.tree_models.RandomForestClassifier.score", false]], "set_labels() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.set_labels", false]], "set_labels() (treemodels.models.tree_models.decisiontreeclassifier method)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.set_labels", false]], "set_params() (treemodels.models.tree_models.decisiontreeclassifier method)": [[3, "treeModels.models.tree_models.DecisionTreeClassifier.set_params", false]], "set_params() (treemodels.models.tree_models.randomforestclassifier method)": [[3, "treeModels.models.tree_models.RandomForestClassifier.set_params", false]], "split_info() (in module treemodels.decision_algorithms)": [[2, "treeModels.decision_algorithms.split_info", false]], "to_leaf() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.to_leaf", false]], "treemodels": [[2, "module-treeModels", false]], "treemodels.base_tree": [[2, "module-treeModels.base_tree", false]], "treemodels.decision_algorithms": [[2, "module-treeModels.decision_algorithms", false]], "treemodels.models": [[3, "module-treeModels.models", false]], "treemodels.models.model": [[3, "module-treeModels.models.model", false]], "treemodels.models.tree_models": [[3, "module-treeModels.models.tree_models", false]], "walkthrough() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.walkthrough", false]], "walkthrough_proba() (treemodels.base_tree.decisiontree method)": [[2, "treeModels.base_tree.DecisionTree.walkthrough_proba", false]]}, "objects": {"": [[2, 0, 0, "-", "treeModels"]], "treeModels": [[2, 0, 0, "-", "base_tree"], [2, 0, 0, "-", "decision_algorithms"], [3, 0, 0, "-", "models"]], "treeModels.base_tree": [[2, 1, 1, "", "BaseDecision"], [2, 1, 1, "", "CategoricDecision"], [2, 1, 1, "", "DecisionTree"], [2, 1, 1, "", "NumericDecision"]], "treeModels.base_tree.BaseDecision": [[2, 2, 1, "", "copy"], [2, 2, 1, "", "make_choice"]], "treeModels.base_tree.CategoricDecision": [[2, 2, 1, "", "copy"], [2, 2, 1, "", "make_choice"]], "treeModels.base_tree.DecisionTree": [[2, 2, 1, "", "copy"], [2, 2, 1, "", "get_class"], [2, 2, 1, "", "get_class_proportion"], [2, 2, 1, "", "get_classes"], [2, 2, 1, "", "get_impurity"], [2, 2, 1, "", "get_label"], [2, 2, 1, "", "get_n_leaves"], [2, 2, 1, "", "height"], [2, 2, 1, "", "insert_tree"], [2, 2, 1, "", "is_leaf"], [2, 2, 1, "", "n_samples"], [2, 2, 1, "", "set_labels"], [2, 2, 1, "", "to_leaf"], [2, 2, 1, "", "walkthrough"], [2, 2, 1, "", "walkthrough_proba"]], "treeModels.base_tree.NumericDecision": [[2, 2, 1, "", "copy"], [2, 2, 1, "", "make_choice"]], "treeModels.decision_algorithms": [[2, 1, 1, "", "ColumnTypes"], [2, 1, 1, "", "DecisionAlgorithm"], [2, 4, 1, "", "c45"], [2, 4, 1, "", "create_categoric_matrix"], [2, 4, 1, "", "entropy"], [2, 4, 1, "", "gain_ratio"], [2, 4, 1, "", "get_col_types"], [2, 4, 1, "", "get_umbral"], [2, 4, 1, "", "get_umbral_candidates"], [2, 4, 1, "", "id3"], [2, 4, 1, "", "information_gain"], [2, 4, 1, "", "max_gain_ratio"], [2, 4, 1, "", "max_information_gain"], [2, 4, 1, "", "split_info"]], "treeModels.decision_algorithms.ColumnTypes": [[2, 3, 1, "", "CATEGORIC"], [2, 3, 1, "", "NUMERIC"]], "treeModels.decision_algorithms.DecisionAlgorithm": [[2, 3, 1, "", "C45"], [2, 3, 1, "", "ID3"]], "treeModels.models": [[3, 0, 0, "-", "model"], [3, 0, 0, "-", "tree_models"]], "treeModels.models.model": [[3, 1, 1, "", "Model"]], "treeModels.models.model.Model": [[3, 2, 1, "", "fit"], [3, 2, 1, "", "predict"], [3, 2, 1, "", "predict_proba"], [3, 2, 1, "", "score"]], "treeModels.models.tree_models": [[3, 1, 1, "", "DecisionTreeClassifier"], [3, 1, 1, "", "RandomForestClassifier"], [3, 4, 1, "", "main"]], "treeModels.models.tree_models.DecisionTreeClassifier": [[3, 3, 1, "", "algorithm"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "get_classes"], [3, 2, 1, "", "get_depth"], [3, 2, 1, "", "get_labels"], [3, 2, 1, "", "get_n_leaves"], [3, 2, 1, "", "get_params"], [3, 3, 1, "", "max_depth"], [3, 3, 1, "", "min_impurity_decrease"], [3, 3, 1, "", "min_samples_leaf"], [3, 3, 1, "", "min_samples_split"], [3, 2, 1, "", "predict"], [3, 2, 1, "", "predict_proba"], [3, 2, 1, "", "prune"], [3, 2, 1, "", "score"], [3, 2, 1, "", "set_labels"], [3, 2, 1, "", "set_params"]], "treeModels.models.tree_models.RandomForestClassifier": [[3, 3, 1, "", "algorithm"], [3, 3, 1, "", "bootstrap"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "get_params"], [3, 3, 1, "", "max_depth"], [3, 3, 1, "", "max_features"], [3, 3, 1, "", "max_samples"], [3, 3, 1, "", "min_impurity_decrease"], [3, 3, 1, "", "min_samples_leaf"], [3, 3, 1, "", "min_samples_split"], [3, 3, 1, "", "n_estimators"], [3, 2, 1, "", "predict"], [3, 2, 1, "", "predict_proba"], [3, 3, 1, "", "random_state"], [3, 2, 1, "", "score"], [3, 2, 1, "", "set_params"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "terms": {"0": 3, "0x127747a60": [], "1": [2, 3], "100": 3, "1d": 3, "2": 3, "5": 2, "A": [2, 3], "For": 3, "If": 3, "It": [2, 3], "The": [2, 3], "abc": [2, 3], "abstract": [2, 3], "accuraci": 3, "ad": 2, "algorithm": [1, 2, 3], "all": 3, "allow": [2, 3], "also": 3, "an": [2, 3], "ani": [2, 3], "appli": 2, "ar": 2, "arrai": [2, 3], "arraylik": [2, 3], "associ": 2, "atr_indx": 2, "atr_label": 2, "attribut": [], "averag": 3, "base": [2, 3], "base_tre": 1, "basedecis": [1, 2], "basetre": 2, "been": 3, "befor": 3, "being": 2, "best": 2, "best_umbr": 2, "binar": 2, "bool": [2, 3], "bootstrap": [1, 2, 3], "both": 2, "boundari": 2, "build": 2, "c4": 2, "c45": [1, 2, 3], "calcul": [2, 3], "call": 3, "can": 3, "candid": 2, "categor": [1, 2], "categoric_matrix": 2, "categoricdecis": [1, 2], "certain": 2, "check": 2, "choic": 2, "class": [2, 3], "class_proport": 2, "classes_copi": 2, "classif": 3, "classifi": 3, "col_valu": 2, "collect": 3, "column": [2, 3], "columntyp": [1, 2], "common": [2, 3], "comput": [2, 3], "construct": 2, "contain": 2, "content": 1, "continu": 2, "control": 2, "convert": 2, "copi": [1, 2], "correct": 3, "correctli": 3, "correspond": [2, 3], "creat": 2, "create_categoric_matrix": [1, 2], "current": 2, "current_height": 2, "current_nod": 2, "custom": 3, "data": [2, 3], "datafram": [2, 3], "dataset": 2, "decis": [2, 3], "decision_algorithm": 1, "decision_copi": 2, "decision_path": [], "decisionalgorithm": [1, 2, 3], "decisiontre": [1, 2], "decisiontreeclassifi": [1, 2, 3], "decreas": [2, 3], "default": 2, "defin": 3, "depth": [2, 3], "determin": 2, "dict": [2, 3], "dictionari": [2, 3], "distribut": 3, "do": 3, "doe": 2, "dure": 2, "each": [2, 3], "element": 3, "ensembl": 3, "entropi": [1, 2], "enum": 2, "enumer": 2, "equal": 2, "evalu": 2, "extens": 2, "fals": 2, "featur": [2, 3], "find": 2, "fit": [1, 2, 3], "float": [2, 3], "forest": 3, "found": 2, "from": [2, 3], "function": [2, 3], "functool": [2, 3], "gain": 2, "gain_ratio": [1, 2], "gener": 2, "get": 2, "get_class": [1, 2, 3], "get_class_proport": [1, 2], "get_col_typ": [1, 2], "get_depth": [1, 2, 3], "get_impur": [1, 2], "get_label": [1, 2, 3], "get_n_leav": [1, 2, 3], "get_param": [1, 2, 3], "get_umbr": [1, 2], "get_umbral_candid": [1, 2], "given": [2, 3], "grow": 2, "growth": 2, "ha": 3, "handl": 2, "have": 2, "height": [1, 2], "highest": 2, "i": [2, 3], "id3": [1, 2], "implement": 3, "improv": 3, "impur": [2, 3], "includ": 2, "index": [0, 2], "indic": 2, "inf": 3, "inform": 2, "information_gain": [1, 2], "input": [2, 3], "insert": 2, "insert_tre": [1, 2], "instanc": [2, 3], "int": [2, 3], "intern": 2, "intrins": 2, "is_leaf": [1, 2], "kei": 3, "label": [2, 3], "leaf": [2, 3], "leav": 3, "less": 2, "like": 2, "list": [2, 3], "liter": 3, "log2": 3, "made": 2, "main": [1, 2, 3], "major": 3, "make": [2, 3], "make_choic": [1, 2], "map": 2, "matrix": [2, 3], "matrixlik": [2, 3], "max_depth": [1, 2, 3], "max_featur": [1, 2, 3], "max_gain_ratio": [1, 2], "max_information_gain": [1, 2], "max_sampl": [1, 2, 3], "maxim": 2, "maximum": [2, 3], "method": 3, "min_impurity_decreas": [1, 2, 3], "min_samples_leaf": [1, 2, 3], "min_samples_split": [1, 2, 3], "minimum": [2, 3], "model": [1, 2], "modifi": 2, "modul": [0, 1], "most": [2, 3], "most_common_class": 2, "must": 2, "n_estim": [1, 2, 3], "n_leav": [2, 3], "n_sampl": [1, 2], "name": [2, 3], "ndarrai": [2, 3], "node": [2, 3], "none": [2, 3], "nonetyp": [], "np": 2, "number": [2, 3], "numer": [1, 2], "numericdecis": [1, 2], "object": 2, "option": 2, "otherwis": 2, "overfit": 3, "packag": [0, 1], "page": 0, "param": [2, 3], "partial": [2, 3], "perform": [2, 3], "place": 2, "predict": [1, 2, 3], "predict_proba": [1, 2, 3], "prevent": 3, "probabl": 3, "proport": [2, 3], "provid": [2, 3], "prune": [1, 2, 3], "qualnam": 2, "random": 3, "random_st": [1, 2, 3], "randomforestclassifi": [1, 2, 3], "ratio": [2, 3], "recurs": 2, "remov": 3, "repres": [2, 3], "requir": 2, "respect": 2, "retriev": 3, "root": 3, "row": 3, "sampl": [2, 3], "score": [1, 2, 3], "search": 0, "self": 3, "set": [2, 3], "set_label": [1, 2, 3], "set_param": [1, 2, 3], "should": 3, "singl": 3, "specif": 2, "specifi": 2, "split": [2, 3], "split_info": [1, 2], "spmatrix": [], "sqrt": 3, "src": 0, "start": 2, "str": 2, "structur": 2, "submodul": 1, "subpackag": 1, "subtre": 2, "target": [2, 3], "task": 3, "test": 3, "than": 2, "thi": [2, 3], "threshold": 2, "through": 2, "to_leaf": [1, 2], "total": 3, "train": 3, "transform": 2, "tree": [2, 3], "tree_copi": 2, "tree_model": [1, 2], "treemodel": [0, 1], "true": [2, 3], "tupl": 2, "type": 2, "umbral": 2, "union": [], "uniqu": 2, "updat": 3, "us": [2, 3], "valu": [2, 3], "valueerror": 3, "variou": 3, "vote": 3, "walk": 2, "walkthrough": [1, 2], "walkthrough_proba": [1, 2], "where": [2, 3], "whether": 2, "which": [2, 3], "x": [2, 3], "y": [2, 3]}, "titles": ["Welcome to Tree Models\u2019s documentation!", "src", "treeModels package", "treeModels.models package"], "titleterms": {"": 0, "attribut": 2, "base_tre": 2, "content": [0, 2, 3], "decision_algorithm": 2, "document": 0, "indic": 0, "model": [0, 3], "modul": [2, 3], "note": 2, "packag": [2, 3], "paramet": [2, 3], "rais": 3, "return": [2, 3], "src": 1, "submodul": [2, 3], "subpackag": 2, "tabl": 0, "tree": 0, "tree_model": 3, "treemodel": [2, 3], "welcom": 0}})